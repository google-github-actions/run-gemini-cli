name: '📋 Gemini Scheduled Issue Triage'

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

jobs:
  triage-issues:
    timeout-minutes: 10
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: vars.APP_ID != ''
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Find untriaged issues'
        id: 'find_issues'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
          GITHUB_OUTPUT: '${{ github.output }}'
        run: |-
          set -euo pipefail

          echo '🔍 Finding issues without labels...'
          NO_LABEL_ISSUES="$(gh issue list --repo "${GITHUB_REPOSITORY}" \
            --search 'is:open is:issue no:label' --json number,title,body)"

          echo '🏷️ Finding issues that need triage...'
          NEED_TRIAGE_ISSUES="$(gh issue list --repo "${GITHUB_REPOSITORY}" \
            --search 'is:open is:issue label:"status/needs-triage"' --json number,title,body)"

          echo '🔄 Merging and deduplicating issues...'
          ISSUES="$(echo "${NO_LABEL_ISSUES}" "${NEED_TRIAGE_ISSUES}" | jq -c -s 'add | unique_by(.number)')"

          echo '📝 Setting output for GitHub Actions...'
          echo "issues_to_triage=${ISSUES}" >> "${GITHUB_OUTPUT}"

          ISSUE_COUNT="$(echo "${ISSUES}" | jq 'length')"
          echo "✅ Found ${ISSUE_COUNT} issues to triage! 🎯"

      - name: 'Run Gemini Issue Triage'
        if: |-
          ${{ steps.find_issues.outputs.issues_to_triage != '[]' }}
        uses: './'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token }}'
          ISSUES_TO_TRIAGE: '${{ steps.find_issues.outputs.issues_to_triage }}'
          REPOSITORY: '${{ github.repository }}'
          GEMINI_CLI_VERSION: '${{ vars.GEMINI_CLI_VERSION }}'
          OTLP_GOOGLE_CLOUD_PROJECT: '${{ vars.OTLP_GOOGLE_CLOUD_PROJECT }}'
          GCP_WIF_PROVIDER: '${{ vars.GCP_WIF_PROVIDER }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          GOOGLE_CLOUD_PROJECT: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          GOOGLE_CLOUD_LOCATION: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          GOOGLE_GENAI_USE_VERTEXAI: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          GOOGLE_GENAI_USE_GCA: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          SERVICE_ACCOUNT_EMAIL: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
        with:
          settings: |-
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh label list)",
                "run_shell_command(gh issue edit)",
                "run_shell_command(gh issue list)"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |-
            ## Role

            You are an issue triage assistant. Analyze issues and apply
            appropriate labels. Use the available tools to gather information;
            do not ask for information to be provided.

            ## Steps

            1. Run: `gh label list`
            2. Check environment variable: "${ISSUES_TO_TRIAGE}" (JSON array
               of issues)
            3. For each issue, apply labels:
               `gh issue edit "${ISSUE_NUMBER}" --add-label "label1,label2"`.
               If available, set labels that follow the `kind/*`, `area/*`,
               and `priority/*` patterns.
            4. For each issue, if the `status/needs-triage` label is present,
               remove it using:
               `gh issue edit "${ISSUE_NUMBER}" --remove-label "status/needs-triage"`

            ## Guidelines

            - Only use existing repository labels
            - Do not add comments
            - Triage each issue independently
            - Reference all shell variables as "${VAR}" (with quotes and braces)

  refresh-embeddings:
    if: vars.ALLOYDB_INSTANCE_CONNECTION_NAME != ''
    timeout-minutes: 20
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: vars.APP_ID != ''
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - id: 'auth'
        uses: 'google-github-actions/auth@140bb5113ffb6b65a7e9b937a81fa96cf5064462' # ratchet:google-github-actions/auth@v2
        with:
          workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@6189d56e4096ee891640bb02ac264be376592d6a' # ratchet:google-github-actions/setup-gcloud@v2

      - name: 'Configure Docker for Artifact Registry'
        run: |-
          gcloud auth configure-docker northamerica-northeast1-docker.pkg.dev

      - name: 'Download AlloyDB Auth Proxy'
        run: |
          curl -o alloydb-auth-proxy https://storage.googleapis.com/alloydb-auth-proxy/v1.13.4/alloydb-auth-proxy.linux.amd64
          chmod +x alloydb-auth-proxy

      - name: 'Start AlloyDB Auth Proxy'
        run: |-
          ./alloydb-auth-proxy "${{ vars.ALLOYDB_INSTANCE_CONNECTION_NAME }}" --public-ip -i --impersonate-service-account ${{ vars.SERVICE_ACCOUNT_EMAIL }} &

      - name: 'Test AlloyDB Auth Proxy'
        env:
          DB_USER: 'postgres'
          DB_PASS: '${{ secrets.ALLOYDB_DB_PASS }}'
        run: |
          PGPASSWORD=$DB_PASS psql "host=127.0.0.1 port=5432 user=$DB_USER dbname=postgres  sslmode=disable" --command="SELECT 1;"

      - name: 'Run Gemini Issue Deduplication Refresh'
        uses: './'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          GEMINI_CLI_VERSION: '${{ vars.GEMINI_CLI_VERSION }}'
          OTLP_GOOGLE_CLOUD_PROJECT: '${{ vars.OTLP_GOOGLE_CLOUD_PROJECT }}'
          GCP_WIF_PROVIDER: '${{ vars.GCP_WIF_PROVIDER }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          GOOGLE_CLOUD_PROJECT: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          GOOGLE_CLOUD_LOCATION: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          GOOGLE_GENAI_USE_VERTEXAI: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          SERVICE_ACCOUNT_EMAIL: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          DB_USER: 'postgres'
          DB_PASS: '${{ secrets.ALLOYDB_DB_PASS }}'
          INSTANCE_HOST: '127.0.0.1'
          INSTANCE_PORT: '5432'
        with:
          settings: |-
            {
             "coreTools": [
                "run_shell_command(echo)"
              ],
              "mcpServers": {
                "issue_deduplication": {
                  "command": "docker",
                  "args": [
                    "run",
                    "-i",
                    "--rm",
                    "--network=host",
                    "-e",
                    "GITHUB_TOKEN",
                    "-e",
                    "GEMINI_API_KEY",
                    "-e",
                    "DB_USER",
                    "-e",
                    "DB_PASS",
                    "-e",
                    "INSTANCE_HOST",
                    "-e",
                    "INSTANCE_PORT",
                    "northamerica-northeast1-docker.pkg.dev/quacktastic-waffle/run-gemini-cli/issues-dedup-mcp-server:latest"
                  ],
                  "env": {
                    "GITHUB_TOKEN": "${GITHUB_TOKEN}",
                    "GEMINI_API_KEY": "${GEMINI_API_KEY}",
                    "DB_USER": "postgres",
                    "DB_PASS": "${DB_PASS}",
                    "INSTANCE_HOST": "${INSTANCE_HOST}",
                    "INSTANCE_PORT": "${INSTANCE_PORT}"
                  },
                  "enabled": true
                }
              },
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |-
            ## Role

            You are a database maintenance assistant for a GitHub issue deduplication system.

            ## Goal

            Your sole responsibility is to refresh the embeddings for all open issues in the repository to ensure the deduplication database is up-to-date.

            ## Steps

            1.  **Extract Repository Information:** The repository is ${{ github.repository }}.
            2.  **Refresh Embeddings:** Call the `refresh` tool with the correct `repo`. Do not use the `force` parameter.
            3.  **Log Output:** Print the JSON output from the `refresh` tool to the logs.

            ## Guidelines

            - Only use the `refresh` tool.
            - Do not attempt to find duplicates or modify any issues.
            - Your only task is to call the `refresh` tool and log its output.
