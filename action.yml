# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

name: 'Run Gemini CLI'
author: 'Google LLC'
description: |-
  Invoke the Gemini CLI from a GitHub Action.

inputs:
  prompt:
    description: 'A specific prompt to guide Gemini.'
    required: false
    default: 'You are a helpful assistant.'
  settings_json:
    description: |
      A JSON string to configure the Gemini CLI. This will be written to
      .gemini/settings.json.
    required: false

outputs:
  summary:
    description: 'The summarized output from the Gemini CLI execution.'
    value: '${{ steps.gemini_run.outputs.gemini_response }}'

runs:
  using: 'composite'
  steps:
    - name: 'Configure Gemini CLI'
      if: |-
        ${{ inputs.settings_json != '' }}
      run: |
        mkdir -p .gemini/
        echo "${SETTINGS_JSON}" > ".gemini/settings.json"
      shell: 'bash'
      env:
        SETTINGS_JSON: '${{ inputs.settings_json }}'

    - name: 'Authenticate to Google Cloud for Telemetry'
      if: |-
        ${{ env.OTLP_GCP_WIF_PROVIDER != '' }}
      id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        project_id: '${{ env.OTLP_GOOGLE_CLOUD_PROJECT }}'
        workload_identity_provider: '${{ env.OTLP_GCP_WIF_PROVIDER }}'

    - name: 'Run Telemetry Collector for Google Cloud'
      if: |-
        ${{ env.OTLP_GCP_WIF_PROVIDER != '' }}
      env:
        OTLP_GOOGLE_CLOUD_PROJECT: '${{ env.OTLP_GOOGLE_CLOUD_PROJECT }}'
        GITHUB_ACTION_PATH: '${{ github.action_path }}'
      shell: 'bash'
      run: |-
        set -euo pipefail
        mkdir -p .gemini/
        sed "s/OTLP_GOOGLE_CLOUD_PROJECT/${OTLP_GOOGLE_CLOUD_PROJECT}/g" "${GITHUB_ACTION_PATH}/scripts/collector-gcp.yaml.template" > ".gemini/collector-gcp.yaml"

        docker run -d --name gemini-telemetry-collector --network host \
          -v "${GITHUB_WORKSPACE}:/github/workspace" \
          -e "GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS/$GITHUB_WORKSPACE//github/workspace}" \
          -w "/github/workspace" \
          otel/opentelemetry-collector-contrib:0.128.0

    - name: 'Install Gemini CLI'
      id: 'install'
      env:
        GEMINI_CLI_VERSION: '${{ env.GEMINI_CLI_VERSION }}'
      shell: 'bash'
      run: |-
        set -euo pipefail

        VERSION_INPUT="${GEMINI_CLI_VERSION:-latest}"

        if [[ "$VERSION_INPUT" == "latest" || "$VERSION_INPUT" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?(\+[a-zA-Z0-9\.-]+)?$ ]]; then
          echo "Installing Gemini CLI from npm: @google/gemini-cli@$VERSION_INPUT"
          npm install -g @google/gemini-cli@$VERSION_INPUT
        else
          echo "Installing Gemini CLI from GitHub: github:google-gemini/gemini-cli#$VERSION_INPUT"
          git clone https://github.com/google-gemini/gemini-cli.git
          cd gemini-cli
          git checkout $VERSION_INPUT
          npm install
          npm run bundle
          npm install -g .
        fi
        echo "Verifying installation:"
        if command -v gemini >/dev/null 2>&1; then
          gemini --version || echo "Gemini CLI installed successfully (version command not available)"
        else
          echo "Error: Gemini CLI not found in PATH"
          exit 1
        fi

    - name: 'Run Gemini CLI'
      id: 'gemini_run'
      run: |
        set -e
        GEMINI_RESPONSE=$(gemini --yolo --prompt "${PROMPT}")
        # Set the captured response as a step output, supporting multiline
        echo "gemini_response<<EOF" >> "${GITHUB_OUTPUT}"
        echo "${GEMINI_RESPONSE}" >> "${GITHUB_OUTPUT}"
        echo "EOF" >> "${GITHUB_OUTPUT}"
        echo "${GEMINI_RESPONSE}"
      shell: 'bash'
      env:
        GEMINI_API_KEY: '${{ env.GEMINI_API_KEY }}'
        SURFACE: 'GitHub'
        GOOGLE_CLOUD_PROJECT: '${{ env.GOOGLE_CLOUD_PROJECT }}'
        GOOGLE_CLOUD_LOCATION: '${{ env.GOOGLE_CLOUD_LOCATION }}'
        GOOGLE_GENAI_USE_VERTEXAI: '${{ env.GOOGLE_GENAI_USE_VERTEXAI }}'
        PROMPT: '${{ inputs.prompt }}'

branding:
  icon: 'terminal'
  color: 'blue'
