name: 'ðŸ¤– Gemini CLI'

on:
  issue_comment:
    types:
      - 'created'
  pull_request_review_comment:
    types:
      - 'created'
  pull_request_review:
    types:
      - 'submitted'

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'write'
  id-token: 'write'
  pull-requests: 'write'
  issues: 'write'

jobs:
  gemini-cli:
    if: |-
      (
        (
          github.event_name == 'issue_comment' ||
          github.event_name == 'pull_request_review_comment'
        ) &&
        contains(github.event.comment.body, '@gemini-cli') &&
        !contains(github.event.comment.body, '/review') &&
        !contains(github.event.comment.body, '/triage') &&
        (
          github.event.comment.author_association == 'OWNER' ||
          github.event.comment.author_association == 'MEMBER' ||
          github.event.comment.author_association == 'COLLABORATOR'
        )
      ) ||
      (
        github.event_name == 'pull_request_review' &&
        contains(github.event.review.body, '@gemini-cli') &&
        !contains(github.event.review.body, '/review') &&
        !contains(github.event.review.body, '/triage') &&
        (
          github.event.review.author_association == 'OWNER' ||
          github.event.review.author_association == 'MEMBER' ||
          github.event.review.author_association == 'COLLABORATOR'
        )
      )
    timeout-minutes: 15
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@v1'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Get contextual data'
        id: 'get_context'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          EVENT_NAME: '${{ github.event_name }}'
          ISSUE_NUMBER: '${{ github.event.issue.number }}'
          PR_NUMBER: '${{ github.event.pull_request.number }}'
          COMMENT_BODY: '${{ github.event.comment.body }}'
          REVIEW_BODY: '${{ github.event.review.body }}'
        run: |-
          set -euo pipefail

          PR_NUMBER=""
          USER_REQUEST=""
          BRANCH=""

          if [[ "${EVENT_NAME}" == "issue_comment" ]]; then
            PR_NUMBER="${ISSUE_NUMBER}"
            USER_REQUEST="${COMMENT_BODY}"
            BRANCH="$(gh pr view "${PR_NUMBER}" --json headRefName -q .headRefName)"
          elif [[ "${EVENT_NAME}" == "pull_request_review_comment" ]]; then
            PR_NUMBER="${PR_NUMBER}"
            USER_REQUEST="${COMMENT_BODY}"
          elif [[ "${EVENT_NAME}" == "pull_request_review" ]]; then
            PR_NUMBER="${PR_NUMBER}"
            USER_REQUEST="${REVIEW_BODY}"
          fi

          if [[ -z "${BRANCH}" ]]; then
            BRANCH="$(gh pr view "${PR_NUMBER}" --json headRefName -q .headRefName)"
          fi

          echo "pr_number=${PR_NUMBER}" >> "${GITHUB_OUTPUT}"
          echo "user_request=${USER_REQUEST}" >> "${GITHUB_OUTPUT}"
          echo "branch_name=${BRANCH}" >> "${GITHUB_OUTPUT}"

      - name: 'Checkout PR code'
        uses: 'actions/checkout@v4'
        with:
          token: '${{ steps.generate_token.outputs.token }}'
          ref: '${{ steps.get_context.outputs.branch_name }}'
          fetch-depth: 0

      - name: 'Acknowledge request'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          PR_NUMBER: '${{ steps.get_context.outputs.pr_number }}'
          REPOSITORY: '${{ github.repository }}'
        run: |-
          gh pr comment "${PR_NUMBER}" \
            --body "I've received your request and I'm working on it now! ðŸ¤–" \
            --repo "${REPOSITORY}"

      - name: 'Run Gemini'
        uses: 'google-github-actions/run-gemini-cli@main'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          REPOSITORY: '${{ github.repository }}'
          USER_REQUEST: '${{ steps.get_context.outputs.user_request }}'
          PR_NUMBER: '${{ steps.get_context.outputs.pr_number }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          OTLP_GCP_WIF_PROVIDER: '${{ vars.OTLP_GCP_WIF_PROVIDER }}'
          OTLP_GOOGLE_CLOUD_PROJECT: '${{ vars.OTLP_GOOGLE_CLOUD_PROJECT }}'
        with:
          settings_json: |-
            {
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh pr view)",
                "run_shell_command(gh pr diff)",
                "run_shell_command(gh pr comment)",
                "run_shell_command(cat)",
                "run_shell_command(head)",
                "run_shell_command(tail)",
                "run_shell_command(grep)",
                "run_shell_command(git config)",
                "run_shell_command(git status)",
                "run_shell_command(git add)",
                "run_shell_command(git commit)",
                "run_shell_command(git push)",
                "run_shell_command(git diff)",
                "write_file"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              },
              "sandbox": false
            }
          prompt: |-
            ## Role

            You are a helpful AI assistant that can perform tasks in a GitHub
            repository. You have access to tools to read and modify files, and
            to interact with GitHub.

            ## Important

            - Use the available shell commands to gather information if needed.
              Do not ask for information to be provided.
            - Reference all shell variables as "${VAR}" (with quotes and braces)
              for safety and correctness.

            ## Steps

            1.  **Understand the Request**:
                - Run `echo "${USER_REQUEST}"` to see the user's request.
                - Run `echo "${REPOSITORY}"` to get the repository name.
                - Run `echo "${PR_NUMBER}"` to get the PR number.
                - For context on files, use `cat`, `head`, `tail`, or `gh pr diff "${PR_NUMBER}"`.

            2.  **Planning**:
                - If the request involves changing code or files, you must
                  first create a plan and ask for user approval.
                - **Do not implement the plan without approval.**
                - The plan must be in the following markdown format:
                  ```
                  plan-id: 1
                  Plan Title: A brief description of the plan.

                  ### Steps
                  1. Detailed step 1.
                  2. Detailed step 2.

                  To approve this plan, comment on the PR with the following command:
                  @gemini-cli plan#1 approved
                  ```

            3.  **Executing an Approved Plan**:
                - If the user's request is a plan approval (e.g., "@gemini-cli
                  plan#1 approved"), you must find the original plan and execute it.
                - To do this:
                  a. Extract the plan ID from the user request (e.g., `1` from
                     `plan#1`).
                  b. Get all PR comments: `gh pr view "${PR_NUMBER}" --json
                     comments -q '.comments[].body'`
                  c. Find the comment containing the matching `plan-id: 1`.
                  d. Execute the steps outlined in the plan.

            4.  **Responding and Committing**:
                - After completing the request, provide a response.
                - If you have modified files:
                  a. Add them: `git add .`
                  b. Commit them: `git commit -m "Your descriptive commit message"`
                  c. Push them: `git push`
                - Write your final response to a file: `write_file("response.md", "<your response here>")`
                - Post the response to the PR: `gh pr comment "${PR_NUMBER}" --body-file response.md --repo "${REPOSITORY}"`
