name: '📋 Gemini Scheduled Issue Triage'

on:
  schedule:
    - cron: '0 * * * *' # Runs every hour
  workflow_dispatch:

concurrency:
  group: '${{ github.workflow }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

permissions:
  contents: 'read'
  id-token: 'write'
  issues: 'write'
  statuses: 'write'

jobs:
  triage-issues:
    timeout-minutes: 5
    runs-on: 'ubuntu-latest'

    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683' # ratchet:actions/checkout@v4

      - name: 'Generate GitHub App Token'
        id: 'generate_token'
        if: |-
          ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e' # ratchet:actions/create-github-app-token@v2
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'

      - name: 'Find untriaged issues'
        id: 'find_issues'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          GITHUB_REPOSITORY: '${{ github.repository }}'
          GITHUB_OUTPUT: '${{ github.output }}'
        run: |-
          set -euo pipefail

          echo '🔍 Finding issues without labels...'
          NO_LABEL_ISSUES="$(gh issue list --repo "${GITHUB_REPOSITORY}" \
            --search 'is:open is:issue no:label' --json number,title,body)"

          echo '🏷️ Finding issues that need triage...'
          NEED_TRIAGE_ISSUES="$(gh issue list --repo "${GITHUB_REPOSITORY}" \
            --search 'is:open is:issue label:"status/needs-triage"' --json number,title,body)"

          echo '🔄 Merging and deduplicating issues...'
          ISSUES="$(echo "${NO_LABEL_ISSUES}" "${NEED_TRIAGE_ISSUES}" | jq -c -s 'add | unique_by(.number)')"

          echo '📝 Setting output for GitHub Actions...'
          echo "issues_to_triage=${ISSUES}" >> "${GITHUB_OUTPUT}"

          ISSUE_COUNT="$(echo "${ISSUES}" | jq 'length')"
          echo "✅ Found ${ISSUE_COUNT} issues to triage! 🎯"

      - name: 'Suggest Labels'
        if: |-
          ${{ steps.find_issues.outputs.issues_to_triage != '[]' }}
        uses: './'
        id: 'suggest_labels'
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          ISSUES_TO_TRIAGE: '${{ steps.find_issues.outputs.issues_to_triage }}'
          REPOSITORY: '${{ github.repository }}'
        with:
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION }}'
          gcp_workload_identity_provider: '${{ vars.GCP_WIF_PROVIDER }}'
          gcp_project_id: '${{ vars.GOOGLE_CLOUD_PROJECT }}'
          gcp_location: '${{ vars.GOOGLE_CLOUD_LOCATION }}'
          gcp_service_account: '${{ vars.SERVICE_ACCOUNT_EMAIL }}'
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          use_vertex_ai: '${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}'
          use_gemini_code_assist: '${{ vars.GOOGLE_GENAI_USE_GCA }}'
          settings: |-
            {
              "maxSessionTurns": 25,
              "coreTools": [
                "run_shell_command(echo)",
                "run_shell_command(gh label list)"
              ],
              "telemetry": {
                "enabled": true,
                "target": "gcp"
              }
            }
          prompt: |-
            ## Role

            You are an issue triage assistant. For each issue provided, suggest
            the most appropriate existing labels.

            ## Steps

            1. Run: `gh label list` to get all available labels.
            2. Review the issues provided in the environment variable:
               "${ISSUES_TO_TRIAGE}" (a JSON array of issues).
            3. For each issue, classify it by its kind (bug, enhancement,
               documentation, cleanup, etc) and its priority (p0, p1, p2, p3).
            4. Output a JSON object where the keys are the issue numbers and the
               values are comma-separated strings of labels to apply.
               For example:
               {
                 "123": "kind/bug,priority/p1",
                 "456": "kind/enhancement,priority/p2,remove:status/needs-triage"
               }

            ## Guidelines

            - Only use labels that already exist in the repository.
            - Do not add comments or modify the issue content.
            - Triage each issue independently.
            - Output only the JSON object.
            - If no labels are applicable for an issue, you can omit it from the JSON output.

      - name: 'Apply Labels'
        if: |-
          ${{ steps.suggest_labels.outputs.result }}
        env:
          GITHUB_TOKEN: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          LABELS_JSON: '${{ steps.suggest_labels.outputs.result }}'
        run: |
          set -euo pipefail

          echo "${LABELS_JSON}" | jq -c '. | to_entries[]' | while read -r entry; do
            ISSUE_NUMBER=$(echo "$entry" | jq -r '.key')
            LABELS_TO_APPLY=$(echo "$entry" | jq -r '.value')

            ADD_LABELS=""
            REMOVE_LABELS=""

            for label in $(echo "${LABELS_TO_APPLY}" | tr ',' ' '); do
              if [[ $label == remove:* ]]; then
                REMOVE_LABELS="${REMOVE_LABELS},${label#remove:}"
              else
                ADD_LABELS="${ADD_LABELS},${label}"
              fi
            done

            ADD_LABELS="${ADD_LABELS#,}"
            REMOVE_LABELS="${REMOVE_LABELS#,}"

            if [[ -n "${ADD_LABELS}" ]]; then
              gh issue edit "${ISSUE_NUMBER}" --add-label "${ADD_LABELS}"
            fi

            if [[ -n "${REMOVE_LABELS}" ]]; then
              gh issue edit "${ISSUE_NUMBER}" --remove-label "${REMOVE_LABELS}"
            fi
          done

      - name: 'Post Issue Triage Failure Comment'
        if: |-
          ${{ failure() && steps.suggest_labels.outcome == 'failure' }}
        uses: 'actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea'
        with:
          github-token: '${{ steps.generate_token.outputs.token || secrets.GITHUB_TOKEN }}'
          script: |-
            github.rest.issues.createComment({
              owner: '${{ github.repository }}'.split('/')[0],
              repo: '${{ github.repository }}'.split('/')[1],
              issue_number: '${{ github.event.issue.number }}',
              body: 'There is a problem with the Gemini CLI issue triaging. Please check the [action logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.'
            })
